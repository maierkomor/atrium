diff --git a/components/bootloader_support/include/esp_image_format.h b/components/bootloader_support/include/esp_image_format.h
index c427cffa..98e7bf23 100644
--- a/components/bootloader_support/include/esp_image_format.h
+++ b/components/bootloader_support/include/esp_image_format.h
@@ -37,7 +37,7 @@ typedef enum {
 } esp_image_spi_mode_t;
 
 /* SPI flash clock frequency */
-enum {
+typedef enum {
     ESP_IMAGE_SPI_SPEED_40M,
     ESP_IMAGE_SPI_SPEED_26M,
     ESP_IMAGE_SPI_SPEED_20M,
diff --git a/components/esp8266/source/event_default_handlers.c b/components/esp8266/source/event_default_handlers.c
index a3ef8732..24b9ae3d 100644
--- a/components/esp8266/source/event_default_handlers.c
+++ b/components/esp8266/source/event_default_handlers.c
@@ -45,6 +45,7 @@ do{\
 
 typedef esp_err_t (*system_event_handler_t)(system_event_t *e);
 
+/*
 static esp_err_t system_event_ap_start_handle_default(system_event_t *event);
 static esp_err_t system_event_ap_stop_handle_default(system_event_t *event);
 static esp_err_t system_event_sta_start_handle_default(system_event_t *event);
@@ -53,6 +54,7 @@ static esp_err_t system_event_sta_connected_handle_default(system_event_t *event
 static esp_err_t system_event_sta_disconnected_handle_default(system_event_t *event);
 static esp_err_t system_event_sta_got_ip_default(system_event_t *event);
 static esp_err_t system_event_sta_lost_ip_default(system_event_t *event);
+*/
 
 /* Default event handler functions
 
@@ -320,4 +322,4 @@ void esp_event_set_default_wifi_handlers()
      default_event_handlers[SYSTEM_EVENT_AP_STOP]          = system_event_ap_stop_handle_default;
 
      //esp_register_shutdown_handler((shutdown_handler_t)esp_wifi_stop);
-}
\ No newline at end of file
+}
diff --git a/components/esp8266/source/event_loop.c b/components/esp8266/source/event_loop.c
index 14f67c65..83115927 100644
--- a/components/esp8266/source/event_loop.c
+++ b/components/esp8266/source/event_loop.c
@@ -28,6 +28,7 @@
 #include "task.h"
 #include "queue.h"
 
+/*
 static const char* TAG = "event";
 static bool s_event_init_flag = false;
 static void *s_event_queue = NULL;
@@ -114,3 +115,4 @@ esp_err_t esp_event_loop_create_default(void)
 {
     return ESP_OK;
 }
+*/
diff --git a/components/lwip/lwip/src/core/dns.c b/components/lwip/lwip/src/core/dns.c
index 12c6f16f..8ca5f26c 100644
--- a/components/lwip/lwip/src/core/dns.c
+++ b/components/lwip/lwip/src/core/dns.c
@@ -84,7 +84,7 @@
 
 #include "lwip/opt.h"
 
-#if LWIP_DNS /* don't build if not configured for use in lwipopts.h */
+#ifndef CONFIG_UDNS //LWIP_DNS /* don't build if not configured for use in lwipopts.h */
 
 #include "lwip/def.h"
 #include "lwip/udp.h"
diff --git a/components/lwip/port/esp8266/include/lwipopts.h b/components/lwip/port/esp8266/include/lwipopts.h
index 7fea63db..ad6ef780 100644
--- a/components/lwip/port/esp8266/include/lwipopts.h
+++ b/components/lwip/port/esp8266/include/lwipopts.h
@@ -195,7 +195,7 @@
  * UNLOCK_TCPIP_CORE().
  * Your system should provide mutexes supporting priority inversion to use this.
  */
-#define LWIP_TCPIP_CORE_LOCKING         0
+#define LWIP_TCPIP_CORE_LOCKING         1
 
 /**
  * LWIP_TCPIP_CORE_LOCKING_INPUT: when LWIP_TCPIP_CORE_LOCKING is enabled,
diff --git a/components/vfs/vfs.c b/components/vfs/vfs.c
index e59795cc..4c408848 100644
--- a/components/vfs/vfs.c
+++ b/components/vfs/vfs.c
@@ -75,10 +75,10 @@ static _lock_t s_fd_table_lock;
 static esp_err_t esp_vfs_register_common(const char* base_path, size_t len, const esp_vfs_t* vfs, void* ctx, int *vfs_index)
 {
     if (len != LEN_PATH_PREFIX_IGNORED) {
-        if ((len != 0 && len < 2) || (len > ESP_VFS_PATH_MAX)) {
+        if (len > ESP_VFS_PATH_MAX) {
             return ESP_ERR_INVALID_ARG;
         }
-        if ((len > 0 && base_path[0] != '/') || base_path[len - 1] == '/') {
+        if ((len > 0) && (base_path[0] != '/')) {
             return ESP_ERR_INVALID_ARG;
         }
     }
diff --git a/tools/idf_tools.py b/tools/idf_tools.py
index 7cdd1823..739dccdc 100755
--- a/tools/idf_tools.py
+++ b/tools/idf_tools.py
@@ -1066,7 +1066,7 @@ def action_install_python_env(args):
             subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--user', 'virtualenv'],
                                   stdout=sys.stdout, stderr=sys.stderr)
 
-        subprocess.check_call([sys.executable, '-m', 'virtualenv', '--no-site-packages', idf_python_env_path],
+        subprocess.check_call([sys.executable, '-m', 'virtualenv', idf_python_env_path],
                               stdout=sys.stdout, stderr=sys.stderr)
     run_args = [virtualenv_python, '-m', 'pip', 'install', '--no-warn-script-location']
     requirements_txt = os.path.join(global_idf_path, 'requirements.txt')

