diff --git a/components/driver/i2c.c b/components/driver/i2c.c
index a9a93687db..0922a8b25f 100644
--- a/components/driver/i2c.c
+++ b/components/driver/i2c.c
@@ -153,7 +153,7 @@ typedef struct {
 static i2c_obj_t *p_i2c_obj[I2C_NUM_MAX] = {0};
 static void i2c_isr_handler_default(void* arg);
 static void IRAM_ATTR i2c_master_cmd_begin_static(i2c_port_t i2c_num);
-static esp_err_t IRAM_ATTR i2c_hw_fsm_reset(i2c_port_t i2c_num);
+esp_err_t IRAM_ATTR i2c_hw_fsm_reset(i2c_port_t i2c_num);
 
 /*
     For i2c master mode, we don't need to use a buffer for the data, the APIs will execute the master commands
@@ -592,7 +592,7 @@ static esp_err_t i2c_master_clear_bus(i2c_port_t i2c_num)
  * If we remove the power supply for the slave during I2C is reading, or directly connect SDA or SCL to ground,
  * this would cause the I2C FSM get stuck in wrong state, all we can do is to reset the I2C hardware in this case.
  **/
-static esp_err_t i2c_hw_fsm_reset(i2c_port_t i2c_num)
+esp_err_t i2c_hw_fsm_reset(i2c_port_t i2c_num)
 {
     I2C_CHECK(i2c_num < I2C_NUM_MAX, I2C_NUM_ERROR_STR, ESP_ERR_INVALID_ARG);
     uint32_t ctr              = I2C[i2c_num]->ctr.val;
diff --git a/components/esp32/event_default_handlers.c b/components/esp32/event_default_handlers.c
index 43305aee0b..bdf483045a 100644
--- a/components/esp32/event_default_handlers.c
+++ b/components/esp32/event_default_handlers.c
@@ -99,13 +99,13 @@ const char* wifi_get_reason(int err)
 
 typedef esp_err_t (*system_event_handler_t)(system_event_t *e);
 
-static esp_err_t system_event_ap_start_handle_default(system_event_t *event);
-static esp_err_t system_event_ap_stop_handle_default(system_event_t *event);
-static esp_err_t system_event_sta_start_handle_default(system_event_t *event);
-static esp_err_t system_event_sta_stop_handle_default(system_event_t *event);
-static esp_err_t system_event_sta_connected_handle_default(system_event_t *event);
-static esp_err_t system_event_sta_disconnected_handle_default(system_event_t *event);
-static esp_err_t system_event_sta_got_ip_default(system_event_t *event);
+esp_err_t system_event_ap_start_handle_default(system_event_t *event);
+esp_err_t system_event_ap_stop_handle_default(system_event_t *event);
+esp_err_t system_event_sta_start_handle_default(system_event_t *event);
+esp_err_t system_event_sta_stop_handle_default(system_event_t *event);
+esp_err_t system_event_sta_connected_handle_default(system_event_t *event);
+esp_err_t system_event_sta_disconnected_handle_default(system_event_t *event);
+esp_err_t system_event_sta_got_ip_default(system_event_t *event);
 static esp_err_t system_event_sta_lost_ip_default(system_event_t *event);
 
 static esp_err_t system_event_eth_start_handle_default(system_event_t *event);
@@ -176,7 +176,7 @@ esp_err_t system_event_eth_disconnected_handle_default(system_event_t *event)
     return ESP_OK;
 }
 
-static esp_err_t system_event_eth_got_ip_default(system_event_t *event)
+esp_err_t system_event_eth_got_ip_default(system_event_t *event)
 {
     ESP_LOGI(TAG, "eth ip: " IPSTR ", mask: " IPSTR ", gw: " IPSTR,
            IP2STR(&event->event_info.got_ip.ip_info.ip),
@@ -186,7 +186,7 @@ static esp_err_t system_event_eth_got_ip_default(system_event_t *event)
     return ESP_OK;
 }
 
-static esp_err_t system_event_sta_got_ip_default(system_event_t *event)
+esp_err_t system_event_sta_got_ip_default(system_event_t *event)
 {
     WIFI_API_CALL_CHECK("esp_wifi_internal_set_sta_ip", esp_wifi_internal_set_sta_ip(), ESP_OK);
 
diff --git a/components/lwip/component.mk b/components/lwip/component.mk
index dca3784775..2806eba928 100644
--- a/components/lwip/component.mk
+++ b/components/lwip/component.mk
@@ -5,7 +5,6 @@ COMPONENT_SUBMODULES += lwip
 
 COMPONENT_ADD_INCLUDEDIRS := \
 	include/apps \
-	include/apps/sntp \
 	lwip/src/include \
 	port/esp32/include \
 	port/esp32/include/arch \
@@ -15,9 +14,7 @@ COMPONENT_ADD_INCLUDEDIRS := \
 COMPONENT_SRCDIRS := \
 	apps/dhcpserver \
 	apps/ping \
-	apps/sntp \
 	lwip/src/api \
-	lwip/src/apps/sntp \
 	lwip/src/core \
 	lwip/src/core/ipv4 \
 	lwip/src/core/ipv6 \
diff --git a/components/lwip/port/esp32/freertos/sys_arch.c b/components/lwip/port/esp32/freertos/sys_arch.c
index 1f98eee71a..b44ff94b00 100644
--- a/components/lwip/port/esp32/freertos/sys_arch.c
+++ b/components/lwip/port/esp32/freertos/sys_arch.c
@@ -59,7 +59,7 @@ sys_mutex_new(sys_mutex_t *pxMutex)
 {
   err_t xReturn = ERR_MEM;
 
-  *pxMutex = xSemaphoreCreateMutex();
+  *pxMutex = xSemaphoreCreateRecursiveMutex();
 
   if (*pxMutex != NULL) {
     xReturn = ERR_OK;
@@ -72,16 +72,19 @@ sys_mutex_new(sys_mutex_t *pxMutex)
 
 /** Lock a mutex
  * @param mutex the mutex to lock */
+extern void abort_on_mutex(sys_mutex_t,const char *);
 void ESP_IRAM_ATTR
 sys_mutex_lock(sys_mutex_t *pxMutex)
 {
-  while (xSemaphoreTake(*pxMutex, portMAX_DELAY) != pdPASS);
+	if (pdFALSE == xSemaphoreTakeRecursive(*pxMutex, 30000))
+		abort_on_mutex(*pxMutex,"<system>");
+//  while (xSemaphoreTake(*pxMutex, portMAX_DELAY) != pdPASS);
 }
 
 err_t
 sys_mutex_trylock(sys_mutex_t *pxMutex)
 {
-  if (xSemaphoreTake(*pxMutex, 0) == pdPASS) return 0;
+  if (xSemaphoreTakeRecursive(*pxMutex, 0) == pdPASS) return 0;
   else return -1;
 }
 
@@ -90,7 +93,7 @@ sys_mutex_trylock(sys_mutex_t *pxMutex)
 void ESP_IRAM_ATTR
 sys_mutex_unlock(sys_mutex_t *pxMutex)
 {
-  xSemaphoreGive(*pxMutex);
+  xSemaphoreGiveRecursive(*pxMutex);
 }
 
 /** Delete a semaphore
