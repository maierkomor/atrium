/*
 *  Copyright (C) 2018-2022, Thomas Maier-Komor
 *  Atrium Firmware Package for ESP
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

option author="Thomas Maier-Komor";
option copyright="2018-2022";

option common {
	BaseClass=Message;
	getMember=getMember;
	id0=true;
	wfclib=extern;
}

option pc : common {
	toSink="";
	toASCII=toASCII;
	optimize=speed;
	header="pcconfig.h";
	header="support.h";
	enumnames=true;
	enummap=true;
}

option esp : common {
	withEqual=true;
	toString="";
	toSink="";
	toWire="";
	toASCII=toASCII;
	intsize=32;
	varintbits=32;
	header="estring.h";
	header=<sdkconfig.h>;
	header="stream.h";
	streamtype=stream;
	stringtype=estring;
	bytestype=estring;
	SortMembers=size;
	enumnames=true;
	enummap="!CONFIG_ESPTOOLPY_FLASHSIZE_1MB";
}

option esp32 : esp {
	optimize=speed;
	endian=little;		// not for esp8266, does not allow unaligned access
	withUnequal=true;
	/AdcConfig/mode:		used = false;
	/AdcConfig/clk_div:		used = false;
}

option esp8266 : esp {
	ssize_t=_ssize_t;
	optimize=size;
	withUnequal=false;
	/TouchpadConfig:		used = false;
	/TouchChannelConfig:		used = false;
	/AdcChannel:			used = false;
	/HardwareConfig/uart:		used = false;
	/HardwareConfig/touchpad:	used = false;
	/HardwareConfig/tp_channel:	used = false;
	/I2CConfig/freq:		used = false;
	/UartConfig/tx_gpio:		used = false;
	/UartConfig/rx_gpio:		used = false;
	/UartConfig/cts_gpio:		used = false;
	/UartConfig/rts_gpio:		used = false;
	/AdcConfig/adc1_bits:		used = false;
	/AdcConfig/adc2_bits:		used = false;
	/AdcConfig/hall_name:		used = false;
	/AdcConfig/channels:		used = false;
	/Ws2812bConfig/ch:		used = false;
}

option esp8285 : esp8266 {
	BaseClass="";
	getMember="";
}



message SystemConfig
{
	string manufacturer = 1	[ unset = ""];
	string board_name = 2	[ unset = ""];
	string board_rev = 3	[ unset = ""];
	sint8 diag_uart = 4	[ unset = 0 ];
	sint8 console_rx = 5	[ default = 0 ];
	sint8 console_tx = 6	[ default = 0 ];
	string model_name = 7	[ unset = ""];
	string model_number = 8	[ unset = ""];
}


message TouchpadConfig
{
	bool fsm_mode = 1	[ unset = false ];
	sint8 lvolt = 2		[ unset = -1 ];
	sint8 hvolt = 3		[ unset = -1 ];
	sint8 atten = 4		[ unset = -1 ];
	unsigned interval = 7;
}


message TouchChannelConfig
{
	string name = 1		[ unset = "" ];
	sint8 channel = 2	[ unset = -1 ];
	fixed16 threshold = 3;
	uint8 slope = 4;
	uint8 tieopt = 5;
}


enum pull_mode_e
{
	option allow_alias = true;
	pull_none = 0;
	pull_en = 1;
	pull_dir = 2;
	pull_down = 1;
	pull_up = 3;
}


bitset pull_mode_t
{
	bool enable : 0;
	bool up : 1;
}


message ButtonConfig
{
	string name = 1			[ unset = "" ];
	sint8 gpio = 2			[ unset = -1 ];
	bool presslvl = 3		[ unset = 0 ];
	pull_mode_t pull_mode = 4	[ unset = pull_none ];
	sint8 clk = 5			[ unset = -1, ifdef=CONFIG_ROTARYENCODER ];
	sint8 dt = 6			[ unset = -1, ifdef=CONFIG_ROTARYENCODER ];
}


bitset relay_cfg_t
{
	bool active_high : 0;
	bool init_on : 1;
	bool persistent : 2;
	bool opendrain : 3;
	bool mqtt : 4;
}


message RelayConfig
{
	string name = 1		[ unset = "" ];
	sint8 gpio = 2		[ unset = -1 ];
	relay_cfg_t config = 3	[ unset = 0 ];
	unsigned min_itv = 4	[ default = 0 ];	// minimum interval
	sint8 interlock = 5	[ unset = -1 ];		// index of relay to interlock with
}


message Max7219Config
{
	sint8 clk = 1		[ unset = -1 ];
	sint8 dout = 2		[ unset = -1 ];
	sint8 cs = 3		[ unset = -1 ];
	bool odrain = 4		[ unset = false ];
	uint8 digits = 5	[ unset = 0 ];
}


message Tlc5947Config
{
	sint8 sin = 1		[ unset = -1 ];
	sint8 sclk = 2		[ unset = -1 ];
	sint8 xlat = 3		[ unset = -1 ];
	sint8 blank = 4		[ unset = -1 ];
	uint8 ntlc = 5		[ unset = 0 ];
}


message Ws2812bConfig
{
	sint8 gpio = 1		[ unset = -1 ];
	sint8 ch = 2		[ unset = -1 ];
	uint8 nleds = 3		[ unset = 0 ];
}


enum dht_model_t
{
	DHT_NONE = 0;
	RHT03 = 3;
	DHT11 = 11;
	DHT21 = 21;
	DHT22 = 22;
	AM2301 = 2301;
	AM2302 = 2302;
}


message DhtConfig
{
	dht_model_t model = 1	[ unset = DHT_NONE ];
	sint8 gpio = 2		[ unset = -1 ];
}


enum i2cdrv_t {
	i2cdrv_invalid = 0;
	i2cdrv_pcf8574 = 1;
	i2cdrv_mcp2300x = 2;
	i2cdrv_mcp2301x = 3;
	i2cdrv_pca9685 = 4;
	i2cdrv_pca9685_npn = 5;
	i2cdrv_pca9685_pnp = 6;
	i2cdrv_pca9685_xclk = 7;
	i2cdrv_pca9685_xclk_npn = 8;
	i2cdrv_pca9685_xclk_pnp = 9;
	i2cdrv_ht16k33 = 10;
	i2cdrv_ina219 = 11;
	i2cdrv_si7021 = 12;
}


bitset i2cdev_t
{
	// Use addr=0 (general call address) to scan all potential addresses.
	// Address range scan is not supported by all drivers and may
	// result in misdetections.
	uint8 addr : 0..6;
	i2cdrv_t drv : 8..15;
}


message I2CConfig
{
	uint8 port = 1		[ default = 0 ];
	sint8 sda = 2		[ unset = -1 ];
	sint8 scl = 3		[ unset = -1 ];
	unsigned freq = 4	[ default = 100000 ];
	bool xpullup = 5;	// have external pull-ups
	repeated i2cdev_t devices = 6	[ packed = true, ifdef=CONFIG_I2C_XDEV ];
}


message HcSr04Config
{
	sint8 trigger = 1	[ unset = -1 ];
	sint8 echo = 2		[ unset = -1 ];
	string name = 3		[ unset = "" ];
}


bitset ledcfg_t
{
	bool active_high : 0;
	bool open_drain : 1;
}


message LedConfig
{
	sint8 gpio = 1		[ unset = -1 ];
	ledcfg_t config = 2	[ default = 0 ];
	string name = 3		[ unset = "" ];
	sint8 pwm_ch = 4	[ unset = -1 ];
}


message OneWireConfig
{
	sint8 gpio = 1		[ unset = -1 ];
	// pull-up the gpio - internal pull-up is too weak for most applications!
	bool pullup = 2		[ unset = false ];
	sint8 power = 3		[ unset = -1 ];
}


message UartConfig
{
	sint8 port = 1		[ unset = -1 ];
	sint8 tx_gpio = 2	[ unset = -1 ];
	sint8 rx_gpio = 3	[ unset = -1 ];
	sint8 cts_gpio = 4	[ unset = -1 ];
	sint8 rts_gpio = 5	[ unset = -1 ];
}


message AdcChannel
{
	string name = 1		[ unset = "" ];

	// ADC1 or ADC2 - ADC2 cannot be used with WiFi started
	uint8 unit = 2		[ unset = 0 ];

	// valid channels: 0-9
	sint8 ch = 3		[ unset = -1 ];

	// adc_atten_t: 0 = 0dB, 1=2,5dB, 2=6dB, 3=11dB
	uint8 atten = 4		[ default = 0 ];	
	// 0: manual sampling, >0: sampling interval in ms
	uint16 interval = 5	[ unset = 0 ];
	uint8 window = 6	[ unset = 0 ];
	/*
	// sliding window requires window-size*2 bytes additional RAM
	bool slide = 7		[ default = false ];
	*/
}


message AdcConfig
{
	// esp8266: set name to enable
	// esp32: not used
	string adc_name = 1	[ unset = "" ];

	// adc_width_t: 0=9bit .. 3=12bit, adc is disabled if not set
	uint8 adc1_bits = 2	[ default = 0 ];
	uint8 adc2_bits = 3	[ default = 0 ];

	uint8 mode = 4;		// esp8266 only (adc_mode_t: TOUT_MODE=0, VDD_MODE=1)
	uint8 clk_div = 5;	// esp8266 only

	// name of hall sensor
	string hall_name = 6	[ unset = "" ];

	repeated AdcChannel channels = 7;
}


bitset gpiocfg_t
{
	uint8 mode : 0..1;
	uint8 intrtype : 2..4;
	bool setinit : 5;
	bool initlvl : 6;
	bool pullup : 7;
	bool pulldown : 8;
	bool cap_freq_r2r : 9;	// determine frequence rise-to-rise
}


message GpioConfig
{
	string name = 1;
	sint8 gpio = 2		[ unset = -1 ];
	// bit 1,0: gpio_mode_t: disable, input, output, output_od
	// bit 4..2: gpio_int_type_t
	//	{0=none, 1=pos dge, 2=neg edge, 3=both edge}
	//	{4=lolevel, 5=hilevel}: currently unused
	// bit 5: set initial level
	// bit 6: init level
	// bit 7: pull-up enable
	// bit 8: pull-down enable
	// bit 9: frequency rise2rise instead of fall2fall
	gpiocfg_t config = 3;
}


enum disp_t
{
	dt_none = 0;

	// segment displays
	dt_sd_7seg = 1;
	dt_sd_14seg = 2;

	// LCD text displays
	dt_pcf8574_hd44780u = 16;
	
	// monochrom displays
	dt_ssd1306 = 32;
}


message DisplayConfig
{
	disp_t type = 1		[ unset = dt_none ];
	unsigned options = 2	[ default = 0 ];
	unsigned maxx = 3;
	unsigned maxy = 4	[ default = 1 ];
}


/*
enum spiopt_t
{
	txlsbfirst = 1;
	rxlsbfirst = 2;
	mosi_as_miso = 4;	// 3-wire mode, MOSI is also used as MiSO
	positive_cs = 8;
	half_duplex = 16;

	pol_hi = 0x100;
	pha_hi = 0x200;
}

message SpiBus
{
	
	uint8 options;		// spiopt_t bits
	uint8 freq = 3;		// in MHz
}


message SpiDevice
{
	sint8 bus = 1		[ unset = -1 ];
	sint8 cs = 2		[ unset = -1 ];
	sint8 intr = 3		[ unset = -1 ];
	spidrv_t drv		[ unset = spidrv_invalid ];
}
*/


message GpioCluster
{
	string name = 1		[ unset = "" ];
	uint8 base = 2		[ unset = 0 ];
	uint8 numio = 3		[ unset = 0 ];
	sint8 int_a = 4		[ unset = -1 ];
	sint8 int_b = 5		[ unset = -1 ];
}


message HardwareConfig
{
	fixed32 magic = 0;	// should always be set to 0xAE54EDCB
	// core hardware
	SystemConfig system = 1;
	repeated UartConfig uart = 3;
	AdcConfig adc = 4;
	TouchpadConfig touchpad = 5			[ ifdef=CONFIG_TOUCHPAD ];
	repeated TouchChannelConfig tp_channel = 6	[ ifdef=CONFIG_TOUCHPAD ];
	repeated GpioConfig gpio = 7;
//	repeated SpiBus spibus = 8;
//	repeated SpiDevice spidev = 9;

	// direct gpio drivers
	repeated ButtonConfig button = 16	[ ifdef=CONFIG_BUTTON ];
	repeated RelayConfig relay = 17		[ ifdef=CONFIG_RELAY ];
	repeated LedConfig led = 18		[ ifdef=CONFIG_LEDS ];

	// high level applicaton drivers
	Max7219Config max7219 = 32		[ ifdef=CONFIG_MAX7219 ];	// for 7-segment clock
	Tlc5947Config tlc5947 = 33		[ ifdef=CONFIG_NIGHTSKY ];	// for nightsky LEDs
	Ws2812bConfig ws2812b = 34		[ ifdef=CONFIG_LEDSTRIP ];	// for ws2812b LED strips
	DhtConfig dht = 35			[ ifdef=CONFIG_DHT ];
	repeated I2CConfig i2c = 36		[ ifdef=CONFIG_I2C ];
	repeated HcSr04Config hcsr04 = 37	[ ifdef=CONFIG_HCSR04 ];
	OneWireConfig onewire = 38		[ ifdef=CONFIG_ONEWIRE ];
	repeated GpioCluster iocluster = 40	[ ifdef=CONFIG_IOEXTENDERS ];

	DisplayConfig display = 50		[ ifdef=CONFIG_DISPLAY ];
}
